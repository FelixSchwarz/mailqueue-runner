"""
mq-sendmail

Usage:
    mq-sendmail [options] <recipients>...

Options:
  -C, --config=<CFG>  Path to the config file (default: /etc/mailqueue-runner.ini)
  --set-date-header   Add a "Date" header to the message (if not present)
  --set-from-header   Set the "From:" header in the outgoing mail based on the unix user
  --set-msgid-header  Add a "Message-ID" header to the message (if not present)
  --verbose, -v       more verbose program output
"""

import os
import platform
import sys
from datetime import datetime as DateTime, timezone
from email.message import EmailMessage
from email.parser import BytesHeaderParser
from email.utils import format_datetime, make_msgid
from io import BytesIO

from docopt import docopt

from schwarz.mailqueue.app_helpers import init_app, init_smtp_mailer
from schwarz.mailqueue.message_handler import InMemoryMsg, MessageHandler


__all__ = ['mq_sendmail_main']

def mq_sendmail_main(argv=sys.argv, return_rc_code=False):
    arguments = docopt(__doc__, argv=argv[1:])
    config_path = arguments['--config']
    recipients = arguments['<recipients>']
    verbose = arguments['--verbose']

    set_date_header = arguments['--set-date-header']
    set_from_header = arguments['--set-from-header']
    set_msgid_header = arguments['--set-msgid-header']

    msg_bytes = sys.stdin.buffer.read()
    try:
        username = os.getlogin()
    except OSError:
        # GitHub Actions: "[Errno 6] No such device or address"
        username = 'root'
    smtp_sender_domain = platform.uname().node
    msg_sender = f'{username}@{smtp_sender_domain}'

    cli_options = {
        'verbose': verbose,
        'quiet'  : not verbose,
    }
    settings = init_app(config_path, options=cli_options)
    mailer = init_smtp_mailer(settings)

    extra_header_lines = autogenerated_headers(
        set_date_header,
        set_from_header,
        set_msgid_header,
        msg_bytes,
        msg_sender,
    )
    msg = InMemoryMsg(msg_sender, recipients, extra_header_lines + msg_bytes)

    mh = MessageHandler(transports=(mailer,))
    send_result = mh.send_message(msg)

    if verbose:
        cli_output = build_cli_output(send_result)
        print(cli_output)
    was_sent = bool(send_result)
    exit_code = 0 if was_sent else 100
    if return_rc_code:
        return exit_code
    sys.exit(exit_code)


def autogenerated_headers(set_date_header, set_from_header, set_msgid_header, msg_bytes, msg_sender):  # noqa: E501 (line-too-long)
    input_headers = BytesHeaderParser().parse(BytesIO(msg_bytes))
    extra_headers = EmailMessage()
    input_msg_date = input_headers.get('Date')
    if set_date_header and not input_msg_date:
        extra_headers['Date'] = format_datetime(DateTime.now(timezone.utc))
    input_msg_from = input_headers.get('From')
    if set_from_header and not input_msg_from:
        extra_headers['From'] = msg_sender
    input_msg_id = input_headers.get('Message-ID')
    if set_msgid_header and not input_msg_id:
        _, smtp_sender_domain = msg_sender.split('@', 1)
        extra_headers['Message-ID'] = make_msgid(domain=smtp_sender_domain)

    prepended_header_lines = b''
    if extra_headers:
        fake_msg_bytes = extra_headers.as_bytes()
        prepended_header_lines = fake_msg_bytes.split(b'\n\n', 1)[0] + b'\n'
    return prepended_header_lines


def build_cli_output(send_result) -> str:
    was_sent = bool(send_result)
    if was_sent:
        if send_result.queued:
            verb = 'queued'
            via = f' via {send_result.transport}'
        elif send_result.discarded:
            verb = 'discarded'
            via = ''
        else:
            verb = 'sent'
            via = f' via {send_result.transport}'
        return f'Message was {verb}{via}.'
    return ''
